" 简介 {
" 设置本文档的默认折叠模式为标记
" 参考：http://vim.wikia.com/wiki/Modeline_magic
" vim: foldmethod=marker foldlevel=0 foldmarker={,}
" 自己使用的 Vim 配置
" 主要平台：macOS,Windows,Linux / 终端：iTerm2,Windows Terminal /
" 主题：Solarized / 推荐字体：Nerd Fonts, SarasaGothic
" Copyright 2019 @yzlnew
" }

" 环境设置 {
    " 识别平台 {
        silent function! OSX()
            return has('macunix')
        endfunction
        silent function! LINUX()
            return has('unix') && !has('macunix') && !has('win32unix')
        endfunction
        silent function! WINDOWS()
            return  (has('win32') || has('win64'))
        endfunction
    " }
    " Shell {
        set nocompatible        " Must be first line
        if !WINDOWS()
            set shell=/bin/zsh
        endif
        if WINDOWS() && !has('nvim')
            let &pythonthreedll='C:\Users\11103475\scoop\apps\python\current\python38.dll'
            let &pythonthreehome='C:\Users\11103475\scoop\apps\python\current'
        endif
        " if WINDOWS() && has('nvim')
        "     set shell=powershell shellquote= shellpipe=\| shellxquote=(
        "     set shellcmdflag=-NoLogo\ -NoProfile\ -ExecutionPolicy\ RemoteSigned\ -Command
        "     set shellredir=\|\ Out-File\ -Encoding\ UTF8
        " endif
    " }
    " runtimepath {
      set runtimepath+=$HOME/.vim
    " }
    " NeoVim {
        if has('nvim')
            set pyx=3
            set wildoptions=pum
        endif
    " }
" }

" 插件管理 {
" 使用 vim-plug 进行插件管理

    if !WINDOWS()
        if empty(glob('~/.vim/autoload/plug.vim'))
          silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    endif

    call plug#begin('~/.vim/plugged')
        Plug 'yzlnew/vim-im-select', { 'on': [] }
        Plug 'yzlnew/lightline-theme-robin'
        if WINDOWS() && has('nvim')
            Plug 'yzlnew/smartim'
        endif
        if OSX()
            Plug 'dangxuandev/fcitx-vim-osx'    " 正常模式使用英文输入法
        endif
        if LINUX()
            Plug 'brglng/vim-im-select', {'on': [] }
        endif
        Plug 'preservim/nerdtree'
        if has('nvim')
          Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
        else
          Plug 'Shougo/defx.nvim'
          Plug 'roxma/nvim-yarp'
          Plug 'roxma/vim-hug-neovim-rpc'
        endif
        Plug 'sheerun/vim-polyglot'             " 语法高亮等
        Plug 'alpertuna/vim-header'             " 头部信息生成
        Plug 'kristijanhusak/defx-icons'
        Plug 'kristijanhusak/defx-git'
        Plug 'vimwiki/vimwiki'
        Plug 'tpope/vim-unimpaired'             " 一些有用的快捷键
        Plug 'liuchengxu/vista.vim'             " tags, symbols
        Plug 'junegunn/vim-easy-align'          " 文本对齐
        Plug 'mhinz/vim-startify'               " 启动页
        Plug 'cespare/vim-toml'                 " 支持 TOML
        Plug 'wakatime/vim-wakatime'            " Wakatime 编程记录
        Plug 'w0rp/ale'                         " 代码分析和自动修正
        Plug 'junegunn/vim-emoji'               " Emoji
        Plug 'mhinz/vim-signify'                " Git 标记
        Plug 'godlygeek/tabular'                " 对齐文本
        Plug 'plasticboy/vim-markdown'          " 支持 Markdown
        Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
        Plug 'skywind3000/asynctasks.vim'
        Plug 'skywind3000/asyncrun.vim'         " 异步执行命令行指令
        Plug 'itchyny/lightline.vim'            " Lightline
        Plug 'mengelbrecht/lightline-bufferline'
        Plug 'maximbaz/lightline-ale'
        Plug 'SirVer/ultisnips'                 " 代码片段引擎
        Plug 'honza/vim-snippets'               " 代码片段
        Plug 'tpope/vim-fugitive'               " Git
        Plug 'tpope/vim-surround'               " 更改包裹
        Plug 'tpope/vim-commentary'             " 快速注释 `gcc`
        Plug 'Krasjet/auto.pairs'               " 括号自动配对
        Plug 'luochen1990/rainbow'              " 彩虹括号
        Plug 'easymotion/vim-easymotion'        " 快速跳转
        Plug 'wellle/targets.vim'               " 额外的文本对象
        Plug 'lilydjwg/colorizer'               " RGB 颜色显示
        Plug 'mzlogin/vim-markdown-toc'         " Markdown 目录生成
        Plug 'lervag/vimtex'                    " LaTeX
        Plug 'liuchengxu/vim-which-key'
        Plug 'inkarkat/vim-ReplaceWithRegister'  " 粘贴并替换 `gr`
        Plug 'kkoomen/vim-doge'
        Plug 'ryanoasis/vim-devicons'           " 文件图标
        Plug 'liuchengxu/vim-clap'
        Plug 'Yggdroot/LeaderF'
        Plug 'yianwillis/vimcdoc'               " 中文文档
        Plug 'skywind3000/vim-terminal-help'
        Plug 'mg979/vim-visual-multi', {'branch': 'master'}
        Plug 'patstockwell/vim-monokai-tasty'   " 以下都是一些主题
        Plug 'arcticicestudio/nord-vim'         " 暗色主题
        Plug 'iCyMind/NeoSolarized'             " 支持 True Color 的主题
        Plug 'lifepillar/vim-solarized8'        " 支持 nvim 的主题
        Plug 'joshdick/onedark.vim'
        Plug 'rakr/vim-one'
        Plug 'kaicataldo/material.vim'
        Plug 'dikiaap/minimalist'
        Plug 'hzchirs/vim-material'
        Plug 'gruvbox-material/vim', {'as': 'gruvbox-material'}
        Plug 'cormacrelf/vim-colors-github'
        Plug 'sainnhe/vim-color-forest-night'
        Plug 'Rigellute/shades-of-purple.vim'
        if WINDOWS()
            Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.cmd'}
        else
            Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
        endif
    call plug#end()
" }

" 基础设置 {
    set encoding=utf-8
    if WINDOWS()                " gVim 菜单乱码
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
    endif
    set ttyfast
    set lazyredraw
    set history=500             " 历史指令数量
    filetype plugin indent on   " 文件类型
    syntax enable               " 支持语法高亮
    set mouse=a                 " 使用鼠标
    set mousehide               " 输入时隐藏鼠标指针
    scriptencoding utf-8        " UTF-8 文件编码
    set clipboard=unnamed       " 系统剪贴板使用匿名寄存器
    set shortmess+=cfilmnrxoOtT " 减少和缩写消息提示
    set viewoptions=folds,options,cursor,unix,slash
    set virtualedit=onemore     " 允许光标移动到超过行尾的位置
    set nospell                 " 禁用拼写检查
    set hidden                  " 隐藏缓冲区
    set cmdheight=2
    set tags=./.tags;,.tags
    " 自动切换到当前缓冲区文件目录
    autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | silent! lcd %:p:h |
    " 编辑 git commit 时光标指向第一行
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
    " 光标回到之前位置
    function! ResCur()
        if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
            silent normal! g`"
            return 1
        endif
    endfunction
    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END
    " 备份 {
        set nobackup
        set nowritebackup
        if !isdirectory($HOME . '/.vim/files')
            call mkdir($HOME . '/.vim/files')
            " call mkdir($HOME . '/.vim/files/backup')
            call mkdir($HOME . '/.vim/files/swap')
            call mkdir($HOME . '/.vim/files/undo')
        endif
        " set backupdir=$HOME/.vim/files/backup/
        " set backupext=-vimbackup
        " set backupskip=
        set directory=$HOME/.vim/files/swap//
        if has('persistent_undo')
            set undofile
            set undodir=$HOME/.vim/files/undo/
            set undolevels=1000
            set undoreload=10000
        endif
    " }
" }

" UI 设定 {
    " 主题 {
    " 由于 macOS 的终端不支持 True Color，建议使用 iTerm2
    " 另支持正常和插入模式不同的光标样式
        set termguicolors
        let darkmode = 1
        let g:forest_night_enable_italic = 1
        let g:vim_monokai_tasty_italic = 1
        let g:solarized_term_italics=1
        let g:neosolarized_italic=1
        let g:onedark_terminal_italics=1
        let g:material_terminal_italics = 1
        let g:material_theme_style = 'default'
        let g:nord_italic = 1
        let g:nord_cursor_line_number_background = 1

        if OSX()
            let iterm_profile = $ITERM_PROFILE
            if iterm_profile == "robin_dark"
                set background=dark
                colorscheme forest-night
            else
                set background=light
                colorscheme github
            endif

            if $TERM_PROGRAM == 'Apple_Terminal'
                let g:solarized_use16 = 0
                let &t_SI.="\e[5 q"
                let &t_SR.="\e[4 q"
                let &t_EI.="\e[1 q"
            endif
            if $TERM_PROGRAM == 'iTerm.app'
                set termguicolors
                let &t_SI = "\<Esc>]50;CursorShape=1\x7"
                let &t_SR = "\<Esc>]50;CursorShape=2\x7"
                let &t_EI = "\<Esc>]50;CursorShape=0\x7"
            endif
        endif

        if LINUX()
            if darkmode == 1
                set background=dark
                colorscheme forest-night
            else
                set background=light
                colorscheme github
            endif
        endif

        if WINDOWS()
            if darkmode == 1
                set background=dark
                colorscheme gruvbox-material
            else
                set background=light
                colorscheme github
            endif
            let &t_SI.="\e[5 q"
            let &t_SR.="\e[4 q"
            let &t_EI.="\e[1 q"
        endif

        if has('gui_running')
            if WINDOWS()
                " set guifont=SF_Mono:h10
                " set guifont=FiraCode_NF:h11,Sarasa\ Mono\ SC:h11
                set guifont=Operator_Mono_Book:h12,Sarasa\ Mono\ SC:h12
                " set guifont=FiraCode_NF:h11
                set guifontwide=Sarasa\ Mono\ SC:h12
            else
                set guifont=OperatorMonoSSm\ NF:h14
            endif
            set go-=m
            set go-=e
            set go-=T
            set go-=r
            set go-=i
            set go-=L
            set go-=R
            set renderoptions=type:directx
            " highlight clear LineNr
            " highlight clear SignColumn
            " highlight LineNr guibg=NONE
            " highlight Comment gui=italic
        endif

        highlight Keyword cterm=italic gui=italic
        highlight Comment cterm=italic gui=italic
    " }
    set noshowmode
    set colorcolumn=81
    if has('cmdline_info')
        set ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
        set showcmd
    endif

    if has('statusline')
        set laststatus=2
        set statusline=%<%f\
        set statusline+=%w%h%m%r
        set statusline+=\ [%{&ff}/%Y]
        set statusline+=\ [%{getcwd()}]
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%
    endif
    set showtabline=2
    set number                  " 显示行号
    set relativenumber
    set cursorline              " 高亮当前行
    " highlight clear SignColumn  " 去除标志列背景
    " highlight clear LineNr      " 去除行号背景
    " hi Normal     ctermbg=NONE guibg=NONE
    hi LineNr     ctermbg=NONE guibg=NONE
    hi SignColumn ctermbg=NONE guibg=NONE
    set backspace=indent,eol,start
    set showmatch               " 括号匹配
    set incsearch               " 同步搜索
    set hlsearch                " 高亮搜索
    set winminheight=0          " 允许窗口高度为0
    set ignorecase              " 大小写不敏感
    set smartcase               " 使用大写字符时开启大小写敏感
    set wildmenu                " Tab 补全候选
    " set wildmode=list:longest,full
    set whichwrap=b,s,<,>,[,]   " 在行首行尾可以移动到另一行
    set scrolljump=5            " 光标离开屏幕时滚动的行数
    set scrolloff=3             " 收尾留的行数
    set nofoldenable            " 关闭代码折叠
    set list                    " 显示可能引起的空白字符
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:.
    set fillchars+=vert:│
" }

" 格式化 {
    set fo+=mB
    set sidescroll=1
    set conceallevel=2                   " Markdown 用到此项做语法隐藏
    set nowrap
    set autoindent
    set smartindent
    set shiftwidth=4
    set expandtab
    set tabstop=4
    set softtabstop=4
    set nojoinspaces
    set splitright
    set splitbelow
    set pastetoggle=<F12>                " 进入粘贴模式
    autocmd BufWritePre * %s/\s\+$//e    " 保存时清除行末空格
" }

" 快捷键 {
    let mapleader=' '
    " 窗口快速移动 {
        map <C-J> <C-W>j<C-W>_
        map <C-K> <C-W>k<C-W>_
        map <C-L> <C-W>l<C-W>_
        map <C-H> <C-W>h<C-W>_
    " }
    noremap <M-,> :bprevious<CR>
    noremap <M-.> :bnext<CR>

    noremap <M-d> :bd<CR>
    noremap <M-q> <C-w>c
    noremap <M-\> :vsplit<CR>
    noremap <M--> :split<CR>
    noremap <M-;> :vertical resize -5<CR>
    noremap <M-'> :vertical resize +5<CR>
    noremap <M-[> :resize -5<CR>
    noremap <M-/> :resize +5<CR>
    " 移动增强
    noremap <M-h> b
    noremap <M-l> w
    noremap <M-j> gj
    noremap <M-k> gk
    inoremap <M-h> <c-left>
    inoremap <M-l> <c-right>
    inoremap <M-j> <c-\><c-o>gj
    inoremap <M-k> <c-\><c-o>gk
    cnoremap <M-h> <c-left>
    cnoremap <M-l> <c-right>
    " 折行移动到显示的下一行
    noremap j gj
    noremap k gk
    nnoremap Y y$       " 从光标处复制到行尾
    nmap <silent> <leader>/ :nohlsearch<CR>

    " 进入当前文件的目录
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " 可视模式缩进不退出可视模式
    vnoremap < <gv
    vnoremap > >gv
    " 可视模式选择内容可以使用重复操作
    vnoremap . :normal .<CR>

    " 水平移动
    map zl zL
    map zh zH

    " Terminal
    tnoremap <Esc> <C-\><C-n>

    " 禁用方向键
    noremap <Up> <Nop>
    noremap <Down> <Nop>
    noremap <Left> <Nop>
    noremap <Right> <Nop>

" }

" 插件设定 {
    " Surround {
        nmap <leader>sw ysiw
        nmap <leader>sW ysiW
    " }
    " Signify {
        let g:signify_vsc_list = ['git']
        let g:signify_realtime = 0
        let g:signify_line_highlight = 1
        nmap <leader>gj <plug>(signify-next-hunk)
        nmap <leader>gk <plug>(signify-prev-hunk)
        nmap <leader>gJ 9999<leader>gj
        nmap <leader>gK 9999<leader>gk
    " }
    " Lightline {
        let g:lightline = {}
        if get(g:, 'colors_name', 'default') == 'github'
            let g:lightline.colorscheme = 'github'
        endif
        if get(g:, 'colors_name', 'default') == 'forest-night'
            let g:lightline.colorscheme = 'forest_night'
        endif
        if get(g:, 'colors_name', 'default') == 'gruvbox-material'
            let g:lightline.colorscheme = 'gruvbox_material'
        endif
        let g:lightline.separator = { 'left': '', 'right': '' }
        let g:lightline.subseparator = { 'left': '', 'right': '' }
        let g:lightline.component = {
              \  'me': '@yzlnew',
              \  'lineinfo': '%3l:%-2v',
              \  'close': '%999X  '
              \  }
        let g:lightline.component_function = {
              \  'cocstatus': 'coc#status',
              \  'readonly': 'LightlineReadonly',
              \  'fugitive': 'LightlineFugitive',
              \  'filetype': 'Filetype',
              \  'fileformat': 'Fileformat',
              \  'modified': 'LightlineModified'
              \  }
        let g:lightline.component_expand = {
              \  'linter_checking': 'lightline#ale#checking',
              \  'linter_warnings': 'lightline#ale#warnings',
              \  'linter_errors': 'lightline#ale#errors',
              \  'linter_ok': 'lightline#ale#ok',
              \  'buffers': 'lightline#bufferline#buffers'
              \  }
        let g:lightline.component_type = {
              \  'linter_checking': 'left',
              \  'linter_warnings': 'warning',
              \  'linter_errors': 'error',
              \  'linter_ok': 'left',
              \  'buffers': 'tabsel',
              \  }
        let g:lightline#ale#indicator_checking = ""
        let g:lightline#ale#indicator_warnings = "!"
        let g:lightline#ale#indicator_errors = "×"
        let g:lightline#ale#indicator_ok = ""
        " let g:lightline.separator = {'left': '', 'right': ''}
        " let g:lightline.subseparator = {'left': '', 'right': ''}
        let g:lightline.tabline = {'left': [['buffers']], 'right': [['close']]}
        let g:lightline.active = {
              \  'left': [ [ 'mode', 'paste' ],
              \            [ 'fugitive', 'readonly', 'filename', 'modified', 'me' ] ],
              \  'right': [ [ 'cocstatus' ],
              \             [ 'lineinfo', 'percent' ],
              \             [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
              \  }
        let g:lightline#bufferline#enable_devicons = 1
        function! Filetype()
          return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
        endfunction
        function! Fileformat()
          return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
        endfunction
        function! LightlineReadonly()
            return &readonly ? '' : ''
        endfunction
        function! LightlineModified()
            return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
        endfunction
        function! LightlineFugitive()
            if exists('*fugitive#head')
                let branch = fugitive#head()
                return branch !=# '' ? ' '.branch : ''
            endif
            return ''
        endfunction
        function! UpdateLightline() abort
            augroup ReloadLightline
                au!
                if get(g:, 'colors_name', 'default') == 'github'
                    let g:lightline.colorscheme = 'github'
                endif
                if get(g:, 'colors_name', 'default') == 'forest-night'
                    let g:lightline.colorscheme = 'forest_night'
                endif
                if get(g:, 'colors_name', 'default') == 'gruvbox-material'
                    let g:lightline.colorscheme = 'gruvbox_material'
                endif
            augroup END
            call lightline#init()
            call lightline#colorscheme()
            call lightline#update()
        endfunction
        autocmd ColorScheme,WinEnter,BufEnter,VimEnter,TextChanged * call UpdateLightline()
    " }
    " ALE {
        let g:ale_enabled = 0
        let g:ale_set_highlights = 0
        let g:ale_sign_error = 'x'
        let g:ale_sign_warning = '!'
        let g:ale_echo_msg_format = "%severity%: %s  [%linter%]"
        let g:ale_echo_msg_error_str = "Error"
        let g:ale_echo_msg_info_str = "Info"
        let g:ale_echo_msg_warning_str = "Warning"
        let g:ale_writegood_use_global = 1
        let g:ale_change_sign_column_color = 0
        let g:ale_sign_column_always = 1
        let g:ale_fixers = {
        \   'python': ['black','isort','yapf'],
        \   'markdown': ['prettier','trim_whitespace'],
        \    'cpp': ['clang-format','trim_whitespace'],
        \}
    " }
    " Markdown {
        let g:tex_conceal = ""
        let g:vim_markdown_math = 1
        let g:vim_markdown_frontmatter = 1
        let g:vim_markdown_folding_disabled = 1
        " let g:mkdp_path_to_chrome = "open -a Google\\ Chrome"
        let g:instant_markdown_autostart = 0
    " }
    " COC {
        let g:coc_global_extensions = [
                        \ 'coc-json',
                        \ 'coc-word',
                        \ 'coc-vimtex',
                        \ 'coc-lists',
                        \ 'coc-yank',
                        \ 'coc-snippets',
                        \ 'coc-python',
                        \ 'coc-ultisnips',
                        \ 'coc-tasks',
                        \ 'coc-emoji'
                    \ ]
        let g:coc_status_error_sign = '×'
        let g:coc_status_warning_sign = '!'
        " hi IncSearch gui=reverse
        hi HighlightedyankRegion term=bold ctermbg=0 guibg=#cdffd8 guifg=#979797
        nmap <leader>ge :CocCommand explorer<CR>

        " Use tab for trigger completion with characters ahead and navigate.
        " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
        inoremap <silent><expr> <TAB>
              \ pumvisible() ? "\<C-n>" :
              \ <SID>check_back_space() ? "\<TAB>" :
              \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " Use <c-space> to trigger completion.
        inoremap <silent><expr> <c-space> coc#refresh()

        if has('patch8.1.1068')
          " Use `complete_info` if your (Neo)Vim version supports it.
          inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
        else
          imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        endif

        set signcolumn=yes
        set updatetime=300
        " Use `[c` and `]c` to navigate diagnostics
        nmap <silent> [g <Plug>(coc-diagnostic-prev)
        nmap <silent> ]g <Plug>(coc-diagnostic-next)

        " Remap keys for gotos
        nmap <silent> <leader>gd <Plug>(coc-definition)
        nmap <silent> <leader>gy <Plug>(coc-type-definition)
        nmap <silent> <leader>gi <Plug>(coc-implementation)
        nmap <silent> <leader>gf <Plug>(coc-references)

        " Use K to show documentation in preview window
        nnoremap <silent> K :call <SID>show_documentation()<CR>

        function! s:show_documentation()
          if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
          else
            call CocAction('doHover')
          endif
        endfunction

        " Highlight symbol under cursor on CursorHold
        autocmd CursorHold * silent call CocActionAsync('highlight')

        " Remap for rename current word
        nmap <leader>cr <Plug>(coc-rename)

        " Remap for format selected region
        vmap <leader>cf  <Plug>(coc-format-selected)
        nmap <leader>cf  <Plug>(coc-format-selected)

        augroup mygroup
          autocmd!
          " Setup formatexpr specified filetype(s).
          autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
          " Update signature help on jump placeholder
          autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
        augroup end

        " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
        vmap <leader>cs  <Plug>(coc-codeaction-selected)
        nmap <leader>cs  <Plug>(coc-codeaction-selected)

        " Remap for do codeAction of current line
        nmap <leader>ca  <Plug>(coc-codeaction)
        " Fix autofix problem of current line
        nmap <leader>cq  <Plug>(coc-fix-current)

        " Create mappings for function text object, requires document symbols feature of languageserver.
        xmap if <Plug>(coc-funcobj-i)
        xmap af <Plug>(coc-funcobj-a)
        omap if <Plug>(coc-funcobj-i)
        omap af <Plug>(coc-funcobj-a)

        " Use `:Format` to format current buffer
        command! -nargs=0 Format :call CocAction('format')

        " Use `:Fold` to fold current buffer
        command! -nargs=? Fold :call     CocAction('fold', <f-args>)

        " Using CocList
        nnoremap <silent> <leader>cb  :<C-u>CocList buffers<cr>
        " Show maps
        nnoremap <silent> <leader>cm  :<C-u>CocList maps<cr>
        " Show all diagnostics
        nnoremap <silent> <leader>ca  :<C-u>CocList diagnostics<cr>
        " Manage extensions
        nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>
        " Show commands
        nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>
        " Find symbol of current document
        nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
        " Search workspace symbols
        nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>
        " Tasks
        nnoremap <silent> <leader>ct  :<C-u>CocList tasks<cr>
        " Do default action for next item.
        nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>
        " Do default action for previous item.
        nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>
        " Resume latest coc list
        nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>
        " Open CocList
        nnoremap <silent> <leader>cl  :<C-u>CocList<CR>
    " }
    " UltiSnips {
        let g:UltiSnipsExpandTrigger = '<C-j>'
        let g:UltiSnipsJumpForwardTrigger = '<C-j>'
        let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
        let g:UltiSnipsEditSplit="vertical"
        let g:UltiSnipsSnippetsDir='~/.vim/usnips'
        let g:UltiSnipsSnippetDirectories=["UltiSnips", "usnips"]
    " }
    " EasyMotion {
        " map <leader><leader>L <Plug>(easymotion-bd-jk)
    " }
    " NERDTree {
        map <leader>nt :NERDTreeToggle<CR>
        nmap <leader>ntf :NERDTreeFind<CR>

        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=1
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=1
        let g:NERDTreeHijackNetrw=1
    " }
    " defx {
        nmap <leader>e :Defx<CR>
        call defx#custom#option('_', {
              \ 'columns': 'mark:git:indent:icons:filename',
              \ 'winwidth': 40,
              \ 'split': 'vertical',
              \ 'direction': 'topleft',
              \ 'show_ignored_files': 0,
              \ 'buffer_name': '',
              \ 'toggle': 1,
              \ 'resume': 1
              \ })
        call defx#custom#column('icon', {
              \ 'directory_icon': '',
              \ 'opened_icon': '',
              \ 'root_icon': ""
              \ })
        call defx#custom#column('mark', {
              \ 'readonly_icon': "",
              \ 'selected_icon': "",
              \ })
        let g:defx_git#indicators = {
          \ 'Modified'  : '∙',
          \ 'Staged'    : '+',
          \ 'Untracked' : '*',
          \ 'Renamed'   : '→',
          \ 'Unmerged'  : '=',
          \ 'Ignored'   : '☒',
          \ 'Deleted'   : '✗',
          \ 'Unknown'   : '?'
          \ }
        autocmd FileType defx call s:defx_my_settings()
        function! s:defx_my_settings() abort
          " Define mappings
          nnoremap <silent><buffer><expr> <CR>
          \ defx#do_action('open')
          nnoremap <silent><buffer><expr> c
          \ defx#do_action('copy')
          nnoremap <silent><buffer><expr> m
          \ defx#do_action('move')
          nnoremap <silent><buffer><expr> p
          \ defx#do_action('paste')
          nnoremap <silent><buffer><expr> l
          \ defx#do_action('open')
          nnoremap <silent><buffer><expr> E
          \ defx#do_action('open', 'vsplit')
          nnoremap <silent><buffer><expr> P
          \ defx#do_action('open', 'pedit')
          nnoremap <silent><buffer><expr> o
          \ defx#do_action('open_or_close_tree')
          nnoremap <silent><buffer><expr> K
          \ defx#do_action('new_directory')
          nnoremap <silent><buffer><expr> N
          \ defx#do_action('new_file')
          nnoremap <silent><buffer><expr> M
          \ defx#do_action('new_multiple_files')
          nnoremap <silent><buffer><expr> C
          \ defx#do_action('toggle_columns',
          \                'mark:indent:icon:filename:type:size:time')
          nnoremap <silent><buffer><expr> S
          \ defx#do_action('toggle_sort', 'time')
          nnoremap <silent><buffer><expr> d
          \ defx#do_action('remove')
          nnoremap <silent><buffer><expr> r
          \ defx#do_action('rename')
          nnoremap <silent><buffer><expr> !
          \ defx#do_action('execute_command')
          nnoremap <silent><buffer><expr> x
          \ defx#do_action('execute_system')
          nnoremap <silent><buffer><expr> yy
          \ defx#do_action('yank_path')
          nnoremap <silent><buffer><expr> .
          \ defx#do_action('toggle_ignored_files')
          nnoremap <silent><buffer><expr> ;
          \ defx#do_action('repeat')
          nnoremap <silent><buffer><expr> h
          \ defx#do_action('cd', ['..'])
          nnoremap <silent><buffer><expr> ~
          \ defx#do_action('cd')
          nnoremap <silent><buffer><expr> q
          \ defx#do_action('quit')
          nnoremap <silent><buffer><expr> <Space>
          \ defx#do_action('toggle_select') . 'j'
          nnoremap <silent><buffer><expr> *
          \ defx#do_action('toggle_select_all')
          nnoremap <silent><buffer><expr> j
          \ line('.') == line('$') ? 'gg' : 'j'
          nnoremap <silent><buffer><expr> k
          \ line('.') == 1 ? 'G' : 'k'
          nnoremap <silent><buffer><expr> <C-l>
          \ defx#do_action('redraw')
          nnoremap <silent><buffer><expr> <C-g>
          \ defx#do_action('print')
          nnoremap <silent><buffer><expr> cd
          \ defx#do_action('change_vim_cwd')
        endfunction
    " }
    " NERDCommenter {
    let g:NERDSpaceDelims=1
    " }
    " startify {
        let g:ascii = [
        \ '    |\__/,| ',
        \ '  _.|o o  |_ Hello, Robin!',
        \ ]
        let g:startify_custom_header = g:ascii + startify#fortune#boxed()
        let g:startify_session_dir = '~/.vim/session'
    " }
    " AutoPairs {
        let g:AutoPairsShortcutFastWrap = '<leader>fw'
        let g:AutoPairsShortcutJump = '<leader>j'
    " }
    " Vimtex {
        nmap <leader>vr :VimtexReload<CR>
        nmap <leader>vc :update \| VimtexCompileSS<CR>
        nmap <leader>vv :VimtexView<CR>
        let g:vimtex_compiler_latexmk = {
                \ 'executable' : 'latexmk',
                \ 'options' : [
                \   '-xelatex',
                \   '-file-line-error',
                \   '-synctex=1',
                \   '-interaction=nonstopmode',
                \ ],
                \}
        if OSX()
            let g:vimtex_view_enabled = 1
            let g:vimtex_view_method = 'skim'
        endif
        " if has('nvim')
        "     let g:vimtex_compiler_progname = 'nvr'
        " endif
        if LINUX()
            let g:vimtex_view_general_viewer = 'mupdf'
            " let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
            " let g:vimtex_view_general_options_latexmk = '--unique'
            " let g:vimtex_compiler_latexmk_engines = 'xelatex'
        endif
        if WINDOWS()
            let g:vimtex_view_general_viewer = 'SumatraPDF'
            let g:vimtex_view_general_options
                \ = '-reuse-instance -forward-search @tex @line @pdf'
            let g:vimtex_view_general_options_latexmk = '-reuse-instance'
        endif
    " }
    " Smartim {
        let g:smartim_default = '1033'
    " }
    " { header
        let g:header_field_author = '@yzlnew'
        let g:header_field_author_email = 'yzlnew@gmail.com'
        let g:header_auto_add_header = 0
    " }
    " vimwiki {
      let g:vimwiki_global_ext = 0
      let g:vimwiki_list = [{'path': '~/yzlwiki/',
                           \ 'syntax': 'markdown', 'ext': '.md'}]
      let g:vimwiki_table_mappings = 0
      inoremap <F11> <Esc>:VimwikiReturn 1 5<CR>
    " }
    " which-key {
      highlight! default link WhichKeyFloating DiffAdd
      call which_key#register(' ', "g:which_key_map")
      nnoremap <silent> <space> :WhichKey ' '<CR>
      let g:which_key_floating_opts = {'row' : '-10'}
      let g:which_key_hspace = 2
      let g:which_key_sep = '>'
      let g:which_key_use_floating_win = 1
      let g:which_key_position = 'topleft'
      let g:which_key_map =  {}
      let g:which_key_map.g = {'name' : '+Goto'}
      let g:which_key_map.f = {'name' : '+Leaderf'}
      let g:which_key_map.n = {'name' : '+Nerdtree'}
      let g:which_key_map.s = {'name' : '+Surround'}
      let g:which_key_map.t = {'name' : '+Task'}
      let g:which_key_map.v = {'name' : '+Vimtex'}
      let g:which_key_map.w = {'name' : '+Wiki'}
      let g:which_key_map.c = {'name' : '+Coc',
                  \ 'q' : 'fix current',
                  \ 'f' : 'format',
                  \ 'r' : 'rename',
                  \ 'b' : 'buffers',
                  \ 'a' : 'diagnostics',
                  \ 'c' : 'command',
                  \ 'e' : 'extensions',
                  \ 'o' : 'outline',
                  \ 'm' : 'maps',
                  \ 's' : 'symbols',
                  \ 't' : 'tasks',
                  \ 'ca' : 'codeaction',
                  \ 'cs' : 'codeaction selected',
                  \ }
      noremap <leader>ov :e $MYVIMRC<CR>
      let g:which_key_map.o = {'name' : '+Open',
                  \ 'v' : 'vimrc',
                  \ 's' : ['Startify', 'startify'],
                  \ 'e' : ['Defx', 'explorer'],
                  \ 'c' : ['CocList', 'coc list'],
                  \}
      let g:which_key_map.p = {'name' : '+Plug',
                  \ 'u' : ['PlugUpdate', 'update'],
                  \ 'i' : ['PlugInstall', 'install'],
                  \ 'c' : ['PlugClean', 'clean'],
                  \}
      let g:which_key_map.e = 'Explorer'
      let g:which_key_map.d = 'Docstring generation'
      let g:which_key_map.j = 'Jump pairs'
      let g:which_key_map['/'] = 'No highlight'
      let g:which_key_map[' '] = 'which_key_ignore'
    " }
    " Leaderf {
      let g:Lf_HideHelp = 1
      let g:Lf_UseCache = 0
      let g:Lf_UseVersionControlTool = 0
      let g:Lf_IgnoreCurrentBufferName = 1
      let g:Lf_WindowPosition = 'popup'
      let g:Lf_PreviewInPopup = 1
      let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2"}
      let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
      let g:Lf_ShortcutF = '<M-f>'
      let g:Lf_ShortcutB = '<M-b>'
      noremap <leader>ff :<C-U>Leaderf file<CR>
      noremap <leader>fb :<C-U>Leaderf buffer<CR>
      noremap <leader>fm :<C-U>Leaderf mru<CR>
      noremap <leader>fbt :<C-U>Leaderf bufTag<CR>
      noremap <leader>fl :<C-U>Leaderf line<CR>
      noremap <leader>fft :<C-U>Leaderf filetype<CR>
      noremap <leader>fr :<C-U>Leaderf rg<CR>
      noremap <leader>fc :<C-U>Leaderf command<CR>
      noremap <leader>fw :<C-U>Leaderf window<CR>
      noremap <leader>ft :<C-U>Leaderf task<CR>
    " }
    " Asyncrun {
      let g:asyncrun_open = 8
      command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>
      noremap <silent><f5> :AsyncTask file-run<cr>
      noremap <silent><f9> :AsyncTask file-build<cr>
      noremap <silent><leader>tr :AsyncTask file-run<cr>
      noremap <silent><leader>tb :AsyncTask file-build<cr>
      let g:asyncrun_rootmarks = ['.git', '.svn', '.root', '.project', '.hg']
      function! s:lf_task_source(...)
          let rows = asynctasks#source(&columns * 48 / 100)
          let source = []
          for row in rows
              let name = row[0]
              let source += [name . '  ' . row[1] . '  : ' . row[2]]
          endfor
          return source
      endfunc

      function! s:lf_task_accept(line, arg)
          let pos = stridx(a:line, '<')
          if pos < 0
              return
          endif
          let name = strpart(a:line, 0, pos)
          let name = substitute(name, '^\s*\(.\{-}\)\s*$', '\1', '')
          if name != ''
              exec "AsyncTask " . name
          endif
      endfunc

      function! s:lf_task_digest(line, mode)
          let pos = stridx(a:line, '<')
          if pos < 0
              return [a:line, 0]
          endif
          let name = strpart(a:line, 0, pos)
          return [name, 0]
      endfunc

      function! s:lf_win_init(...)
          setlocal nonumber
          setlocal nowrap
      endfunc

      let g:Lf_Extensions = get(g:, 'Lf_Extensions', {})
      let g:Lf_Extensions.task = {
                  \ 'source': string(function('s:lf_task_source'))[10:-3],
                  \ 'accept': string(function('s:lf_task_accept'))[10:-3],
                  \ 'get_digest': string(function('s:lf_task_digest'))[10:-3],
                  \ 'highlights_def': {
                  \     'Lf_hl_funcScope': '^\S\+',
                  \     'Lf_hl_funcDirname': '^\S\+\s*\zs<.*>\ze\s*:',
                  \ },
              \ }
    " }
    " docstring {
      " let g:pydocstring_fomatter = 'numpy'
      " noremap <leader>ds :Pydocstring<CR>
      let g:doge_mapping='<Leader>d'
      let g:doge_mapping_comment_jump_forward='<c-j>'
      let g:doge_mapping_comment_jump_backward='<c-k>'
      let g:doge_doc_standard_python='numpy'
    " }
    " terminal-help {
      let g:terminal_shell='powershell -nologo'
      let g:terminal_cwd=2
    " }
" }
